#!/bin/bash

version=0.10
program=${0##*/}
progdir=${0%/*}
if [ "$progdir" = "$program" ]; then progdir="."; fi
if [ "$progdir" = "." ]; then progdir="$PWD"; fi
parent=$(dirname $progdir)
if [ "$parent" = "." ]; then parent="$PWD"; fi

export LANG=C

# ----------------------------------------------------------------------
function usage() {
    cat <<EOF
NAME
	$program - Make a tarball of the MySQL database files and upload it.

SYNOPSIS
	$program [OPTIONS]

DESCRIPTION

	This script creates a compressed tarball from the MySQL database files
	on disk, and uploads it to the ietf datatracker developer area on
	www.ietf.org.

	It is intended to be used with the docker datatracker environment, after
	you have set up the database with docker/setupdb, started the docker
	image with docker/run, and updated the database with docker/updatedb.  

	To use it, exit from the docker container, to make sure that mysqldb
	isn't running and all the files consistent and available for copy.  Then
	run docker/$program outside the docker container.  You need to have ssh
	access to www.ietf.org in order for the scp command to succeed.

EOF
    echo -e "OPTIONS"
    if   [ "$(uname)" = "Linux" ]; then
        egrep "^[	]+[-][A-Za-z| -]+\*?\)[	]+[A-Za-z].+#" $0 | tr -s "\t|" "\t," | sed -r -e 's/\)[ \t]+([A-Z]+)=\$2[^#]*#/=\1\t/' -e 's/\)[^#]*#/\t/'
    else
        egrep "^[	]+[-][A-Za-z| -]+\*?\)[	]+[A-Za-z].+#" $0 | sed 's/\|.*\$2[^#]*#/	/'| sed -E 's/\|.*\)[^#]*#/	/'
    fi
    cat <<EOF

FILES

AUTHOR
	Written by Henrik Levkowetz, <henrik@levkowetz.com>

COPYRIGHT

	Copyright (c) 2016 IETF Trust and the persons identified as authors of
	the code. All rights reserved.  License 'Simplified BSD', as specified
	in http://opensource.org/licenses/BSD-3-Clause.
	
EOF

}

# ----------------------------------------------------------------------
function die() {
    echo -e "\n$program: error: $*" >&2
    exit 1
}

function note() { 
	if [ -n "$VERBOSE" ]; then echo -e "$*"; fi
}

# ----------------------------------------------------------------------
function version() {
	echo -e "$program $version"
}

# ----------------------------------------------------------------------
trap 'echo "$program($LINENO): Command failed with error code $? ([$$] $0 $*)"; exit 1' ERR


# ----------------------------------------------------------------------
# Option parsing

# Options
shortopts=hvV
longopts=help,verbose,version

# Default values

if   [ "$(uname)" = "Linux" ]; then
    args=$(getopt -o "$shortopts" --long "$longopts" -n '$program' -- $SV "$@")
    if [ $? != 0 ] ; then die "Terminating..." >&2 ; exit 1 ; fi
    eval set -- "$args"
    sed="sed -r"
else
    # Darwin, BSDs
    args=$(getopt -o$shortopts $SV $*)
    if [ $? != 0 ] ; then die "Terminating..." >&2 ; exit 1 ; fi
    set -- $args
    sed="sed -E"
fi

while true ; do
    case "$1" in
	-h| --help)	usage; exit;;		# Show this help, then exit
	-v| --verbose)	VERBOSE=1;;		# Be more talkative
	-V| --version)	version; exit;;		# Show program version, then exit
	--)		shift; break;;
	*) die "Internal error, inconsistent option specification: '$1'";;
    esac
    shift
done

# ----------------------------------------------------------------------
# The program itself

if [ -e "/.dockerenv" -o -n "$(grep -s '/docker/' /proc/self/cgroup)" ]; then
   die "It looks as if you're running inside docker -- please quit docker first."
fi

workdir=$(realpath $progdir/../data/mysql/..)
echo "Working directory: $workdir"
cd $workdir
echo "Building tarfile ..."
tar cjf ietf_utf8.bin.tar.bz2 mysql
echo "Copying tarfile to ietfa.amsl.com ..."
scp ietf_utf8.bin.tar.bz2 ietfa.amsl.com:/a/www/www6s/lib/dt/sprint/
